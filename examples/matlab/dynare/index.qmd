---
title: TCA in DSGEs using Dynare
filters: 
    - include-code-files
bibliography: ../../../references.bib
---

In this example, we will be replicating the results in Section 5.3 of @wegnerTCA2024. Before we get started, make sure to download both the [code](./sw2007.m) and the [Dynare model](./SW2007.zip) and to put both (with the Dynare model unzipped) into the same folder. Your folder should thus include a Matlab script named *sw2007.m* and a folder named *SW2007* containing the Dynare model. 

To make sure that no previously run code has an effect on the code in this example, we recommend starting a new Matlab session or at the least to run the following two lines to clean the environment and the console. 

```{.matlab include="sw2007.m" start-line=2 end-line=3}
```

## Computing the Linearised DSGE using Dynare

Section 5.3 of @wegnerTCA2024 investigates the wage channel of a contractionary monetary policy shock. @wegnerTCA2024 focus on the DSGE of @smetsShocksFrictionsUS2007 which we provide for download above. To be able to anlyse this channel, we must first obtain the first-order approximation of the DSGE. We do this by using [Dynare](https://www.dynare.org). [Check out the official [installation and configuration instructions](https://www.dynare.org/manual/installation-and-configuration.html) if Dynare is not yet installed]{.aside} To use Dynare and the TCA Toolbox, we must first add both to the path using the following code. Beware that you most likely have to change the path in the quotation marks. Instructions on the appropriate Dynare path can be found in the official [installation and configuration instructions](https://www.dynare.org/manual/installation-and-configuration.html) for Dynare. The TCA Toolbox path is the location to which you downloaded the toolbox.  

```{.matlab include="sw2007.m" start-line=6 end-line=9}
```

The first-order approximation of the @smetsShocksFrictionsUS2007 DSGE model can then be obtained by running the following code. Note that we assume that the current folder contains the *SW2007* folder mentioned in the introduction. 

```{.matlab include="sw2007.m" start-line=12 end-line=15}
```

## TCA Setup

We aleady added the TCA Toolbox to the path above. The next step thus involves creating a model, more precisely a `DSGE` model. The following lines created a `DSGE` model from Dynare's output structures. 

```{.matlab include="sw2007.m" start-line=22 end-line=22}
```

Since TCA decomposes total effects, we must first obtain these total effects -- the impulse response functions. This can be achieved using `IRF` which returns an `IRFContainer`. The container stores additional information besides the actual IRFs. Since we are currently only interested in the IRFs themselves, we obtain these using `getIrfArray`. 

```{.matlab include="sw2007.m" start-line=29 end-line=31}
```

## Defining Transmission Channels

To this point we have obtained the first-order solution of the DSGE using Dynare, have loaded the *TCA toolbox*, and obtained the total effects -- the IRFs. We are thus ready to define the actual transmission channels we are interested in. 

The first step to defining transmission channels is to define the transmission matrix. @wegnerTCA2024 choose to order interest rates (*robs*) first, since they are the naturally associated variable with the shock, wages (*dw*) second, and inflation (*pinfobs*) last. This ordering can be achieved using the following code. Note that the ordering of the remaining variables does not matter as long as they are ordered between wages and inflation[^1].

[^1]: This is a theoretical result derived in @wegnerTCA2024. 

```{.matlab include="sw2007.m" start-line=38 end-line=38}
```

Transmission matrices can thus simply be defined through a cell array that orders the endogenous variables. 

We are now ready to define the transmission channels. @wegnerTCA2024 define the demand channel as the channel not going through wages in any period.  We can then use the `notThrough` function to define the demand channel. We simply say that the demand channel is the effect not going through wages (`dw`) for the periods `0:20` -- contemporaneously and up to period 20, which is out maximum period. The first argument of `notThrough` is the variable, the second the periods, and the last is the transmission matrix (`order`). 

```{.matlab include="sw2007.m" start-line=40 end-line=40}
```

The wage channel -- the effect through wages in at least one period -- is simply the negation of the demand channel. The wage channel can thus be obtained in the following way. 

```{.matlab include="sw2007.m" start-line=42 end-line=42}
```

## Computing Transmission Effects

Having defined the transmission channels, we can now compute the effects through these transmission channels -- the transmission effects. This can be done using the `transmission` function of our `DSGE` model. As the first argument we provide the shock we are interested in -- here the monetary policy shock `em`. The second argument is our channel definition, the third the transmsision matrix / ordering, and the last the maximum horizon. 

```{.matlab include="sw2007.m" start-line=45 end-line=46}
```

The returned result will be similar to the total effects, the `irfs` object. All variables will be in their original ordering as defined in the `varobs` block of the Dynare model. IRFs and transmission effects are also already adjusted for the shock sizes defined in Dynare's model file. 

## Visualising Transmission Effects

The best way to inspect and anlyse transmission effects is to visualise them in a decomposition plot. We provide functions to simplify this visualisation as part of the *TCA toolbox*. These functions have already been added to the path above. 

To plot the docomposition, we define names for our channels, which in our case is simply *Demand Channel* and *Wage Channel*. 

```{.matlab include="sw2007.m" start-line=52 end-line=52}
```

We must also obtain the index of the outcome variable of interest. @wegnerTCA2024 focus on inflation, so will we. 

```{.matlab include="sw2007.m" start-line=53 end-line=53}
```

Similarly, we need to obtain the index of the shock we are interested in -- here the monetary policy shock `em`.

```{.matlab include="sw2007.m" start-line=54 end-line=54}
```

Lastly, we need to collect the transmission effects that decompose the total effect. In our case, these are the effects through the demand and wage channels. 

```{.matlab include="sw2007.m" start-line=55 end-line=55}
```

A decomposition plot can then be obtained using `plotDecomposition`. 

```{.matlab include="sw2007.m" start-line=56 end-line=56}
```

The returned plot should look like the following. The black scatter-line corresponds to the total effect of a monetary policy shock on inflation. The blue bars correspond to the effect through the demand channel and the red bars correspond to the effect through the wage channel. 

![Decomposition of the effect of a contractionary monetary policy shock on inflation into the effect through a demand and a wage channel.](first-round.png){#fig-first-round}

## Using an Alternative Transmission Matrix

@wegnerTCA2024 argue that an alternative transmission matrix could also have been used. Specifically, they focus on the alternative transmission matrix in which wages are ordered second to last rather than second. This alternative ordering can be achieved by simply changing the ordering of the variables in `order`. 

```{.matlab include="sw2007.m" start-line=66 end-line=66}
```

We can then define the transmission channels and compute their effects in a similar way to above. 

```{.matlab include="sw2007.m" start-line=68 end-line=73}
```

This alternative decomposition can then be visualised in a decomposition plot. 

```{.matlab include="sw2007.m" start-line=76 end-line=80}
```

The resulting plot should look like the following. The black scatter-line, blue bars, and red bars have all the same meaning as in @fig-first-round. The only difference is that the transmission matrix is different.

![Decomposition of the effect of a contractionary monetary policy shock on inflation into the effect through a demand and a wage channel using the alternative transmission matrix.](second-round.png){#fig-second-round}

## Comparing Transmission Effects of Different Transmission Matrices

We can put @fig-first-round and @fig-second-round next to each other to compare the transmission effects across the two transmission matrices. @fig-dsge-decompositions shows the two next to each other. Clearly, the differences, if they exist, are so small that they are not clearly visible. 

::: {#fig-dsge-decompositions layout-ncol=2}

![First-round](first-round.png)

![Second-round](second-round.png)

Comparing the decomposition of a contractionary monetary policy shock on inflation across the two transmission matrices. 
:::

A better way to compare transmission effects across two transmission matrices is provided by the `plotCompareDecompositions` function, which plots the decompositions into a single plot. The following code produces Figure @fig-plot-comparison. 

```{.matlab include="sw2007.m" start-line=86 end-line=93}
```

Figure @fig-plot-comparison shows that differences exist, as would have been expected by the theory developed in @wegnerTCA2024. However, these differences are small. @wegnerTCA2024 conclude that this is most likely due to wages only playing a role in second-round effects, implying that the contemporaneous effect of wages on demand variables, which is possible under the first transmission matrix but not the second, is small. 

![Comparing the decompositions of a contractionary monetary policy shock on inflation across the two transmission matrices.](comparisons.png){#fig-plot-comparison}
