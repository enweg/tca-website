{"Q":{"Q":"\n`Q` Construct a transmission condition.\n\n`obj = Q(vars)` constructs a transmission condition with the given variable.\n`obj = Q(vars, multiplier)` constructs a transmission condition with\na specified multiplier.\n\n## Arguments\n- `vars` (string, cell array of strings, or integer): The variable(s)\nin the Boolean condition. Must be formatted as `x<num>`.\n- `multiplier` (number or vector): Multiplier(s) associated with\neach term.\n\n## Returns\n- `obj` (Q): A transmission condition.\n\n## Example\n```\nq = Q('x1');            % Single variable\nq = Q({'x1', 'x2'}, [1, -1]);  % Multiple variables with multipliers\n```\n\n## Notes\n- The recommended way to define a variable is using `Q(i)`, where `i`\nis an integer representing a variable index.\n- Users should not directly specify OR (`|`) inside the variable strings.","display":"","or":"\n`|` Combine two transmission conditions using a logical OR.\n\n`result = q1 | q2` performs a logical OR operation between two\ntransmission conditions, returning a new `Q` object.\n\n## Arguments\n- `obj1` (Q): First transmission condition.\n- `obj2` (Q): Second transmission condition.\n\n## Returns\n- `result` (Q): The combined transmission condition.\n\n## Example\n```\nq1 = Q(1);\nq2 = Q(2);\nq = q1 | q2;\n```\n\nSee also `and` (`&`), `not` (`~`)","not":"\n`~` Negate a boolean condition using the logican NOT.\n\n`result = ~q` negates a transmission condition, creating a condition\nwhere the given Boolean statement does not hold.\n\n## Arguments\n- `obj` (Q): A transmission condition to negate.\n\n## Returns\n- `result` (Q): The negated transmission condition.\n\n## Example\n```\nq1 = Q(1);\nq = ~q1;\n```\n\n## Notes\n- If the condition consists of a single variable, it is simply negated.\n- If the condition is more complex, an auxiliary `\"T\"` (true) condition\nis used and the returned condition is equivalent to $Q(T) - Q(b)$\nwhere $b$ is the origional Boolean condition.\n\nSee also `and` (`&`), `or` (`|`)","and":"\n`&` combine two transmission conditions using logical AND.\n\n`result = q1 & q2` performs a logical AND operation between two\ntransmission conditions, returning a new `Q` object. This is the\nsame as $Q(b \\land b')$ where $b$ and $b'$ are the Boolean conditions for\n`q1` and `q2` respectively.\n\n## Arguments\n- `obj1` (Q): First transmission condition.\n- `obj2`(Q): Second transmission condition.\n\n## Returns\n- `result`(Q): The combined transmission condition.\n\nExample:\n```\nq1 = Q(1);\nq2 = Q(2);\nq = q1 & q2;  % Returns Q(\"x2 & x1\")\n```\n\nSee also `or` (`|`), `not` (`~`)","disp":"\n`disp` Display a transmission condition in either systems form or dynamic form.\n\n`disp(q)` displays the transmission condition using the systems form notation.\n\n`disp(q, order)` displays the transmission condition using the dynamic form\nnotation, where `order` is the variable ordering defined by the transmission\nmatrix.\n\n## Arguments\n- `q` (Q): A transmission condition.\n- `order` (vector of integers, optional): The variable ordering defined\nby the transmission matrix. If provided, the condition is displayed\nusing the dynamic form notation.\n\n## Example\n```\nq = makeCondition(\"x1 | x2\");\n\ndisp(q); % Displays condition in systems form.\n\norder = [3, 1, 2];\ndisp(q, order); % Displays condition in dynamic form.\n```"}}