{"Q":"\n`Q` Represents a transmission condition.\n\nThe `Q` class is used to define transmission conditions based on Boolean\nstatements. A transmission condition is denoted as $Q(b)$, where $b$ is a\nBoolean statement involving variables `x<num>`, such as `x1`, `x2`, etc.\nBoolean statements should only contain AND (&) and NOT (!) operations.\n\n## Properties\n- `vars` (cell array of strings): Contains the Boolean variable expressions.\n- `multiplier` (vector of numbers): Multipliers associated with each term.\n\n## Methods\n- `Q`: Constructor to create a transmission condition.\n- `and`: Overloads `&` (logical AND) for `Q` objects.\n- `or`: Overloads `|` (logical OR) for `Q` objects.\n- `not`: Overloads `~` (logical NOT) for `Q` objects.\n- `disp`: Custom display function.\n- `display`: Calls `disp` for better formatting.\n\n## Usage\n```\n% Define variables as transmission conditions\nx = arrayfun(@(i) Q(sprintf('x%d', i)), 1:10);\nq = (x(1) | x(2)) & ~x(3);\n\n% Alternatively, define variables separately\nx1 = Q('x1');\nx2 = Q('x2');\nx3 = Q('x3');\nq = (x1 | x2) & ~x3;\n\n% Creating Q objects with multipliers\nq = Q('x1 & !x3', 1);\nq = Q({'x1', 'x2', 'x1 & x2'}, [1, 1, -1]);\n```\n\n## Notes\n- The recommended constructor is `Q(i)`, where `i` is an integer representing a variable index.\n- Other constructors are for internal use and may lead to incorrect results if misused.\n- DO NOT use OR (`|`) inside the string input for `Q`, as it is not supported."}