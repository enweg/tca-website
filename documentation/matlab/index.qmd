---
title: Matlab Toolbox for Transmission Channel Analysis
sidebar: doc
engine: julia
bibliography: ../../references.bib
---

```{julia}
#| echo: false 
#| include: false 

using DocUtils
using JSON


function load_from_json(filename)
  dict = open(filename, "r") do file 
    JSON.parse(file)
  end
  return dict
end

functions = load_from_json("matlab-documentation-functions.json")
classes = load_from_json("matlab-documentation-classes.json")
class_methods = load_from_json("matlab-documentation-class-methods.json")
```

The **MATLAB Toolbox for Transmission Channel Analysis** provides a suite of functions for conducting transmission channel analysis (TCA) in MATLAB. It includes both standard methods—which are sufficient for most users—and more advanced, customisable techniques.

This overview focuses on the standard methods. Advanced options are described in the [Advanced Section](./advanced.qmd), and implementation details can be found in the [Internals Section](./internals.qmd). For practical demonstrations, see the [Examples](../../examples/matlab/dynare/index.qmd).

Before performing any transmission analysis, add the TCA toolbox to MATLAB’s search path. Update the paths below to match the location of the toolbox on your system:


```{.matlab}
% General functions
addpath("~/Documents/repos/tca-matlab-toolbox/")
% Models
addpath("~/Documents/repos/tca-matlab-toolbox/models/")
% Plotting functions
addpath("~/Documents/repos/tca-matlab-toolbox/plotting/")
```

A typical transmission channel analysis workflow consists of the following steps:

1. Define and estimate a model
2. Compute total effects
3. Construct a transmission matrix
4. Define transmission channels
5. Compute transmission effects
6. Visualise results

The sections that follow document the functions available for each of these steps.

## 1. Defining and estimating a model. 

The first step in transmission channel analysis is to define a model. This model will be used to derive total dynamic causal effects (impulse response functions) and to decompose these effects into effects along transmission channels. The TCA toolbox currently supports the following model types:

- Vector Autoregressions (VARs) for baseline dynamic modelling, estimated via OLS without structural identification.
- Structural VARs (SVARs) with recursive and internal identification schemes.
- Local projections with recursive and external instrument identification schemes.
- DSGE models computed via Dynare.

Each model class extends the abstract type [`Model`](./all-functions/Model.qmd). Detailed descriptions of each model follow.

### Vector Autoregressions (VARs)

A VAR model can be defined using the VAR class and its constructor as shown below:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", classes)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "VAR", class_methods)
```

The constructor requires a dataset in `matrix` or `table` form, with each column representing a variable and each row an observation, ordered from earliest to latest. For example:

```{.matlab}
% data is some dataset in matrix or table form
p = 2  % lag length
mode = VAR(data, p)
```

You can include deterministic trends by specifying the `trendExponents` option:

```{.matlab}
p = 2  % lag length
mode = VAR(data, p, 'trendExponents', 0:1)
```

Here, `0:1` indicates a constant ($t^0$) and a linear trend ($t^1$). For constant, linear, and quadratic trends use `0:2`, or `[0,2]` to skip the linear term.

To estimate the VAR via OLS, call `fit`:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "fit", class_methods)
```

```{.matlab}
% if model is a VAR 
model.fit()
```

Retrieve estimates with:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "coeffs", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "fitted", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "residuals", class_methods)
```

```{.matlab}
% All coefficients
model.coeffs()  
% Excluding constants/trends
model.coeffs(true)
% Fitted values
model.fitted()
% Residuals
model.residuals()
```

To select the optimal lag length automatically, use `fitAndSelect`. This method fits `VAR` models for every lag length from 0 up to the specified maximum, evaluates each using the chosen information criterion (AIC by default), and returns the model with the lowest criterion value along with a table of lag lengths and their corresponding scores:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "fitAndSelect", class_methods)
```

```{.matlab}
% Choosing a maximum of 20 lags
model = VAR(data, 20);
[modelBest, icTable] = model.fitAndSelect();
```

`fitAndSelect` supports the following information criteria. Note the underscore suffix (_) on these functions.

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "aic_", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "bic_", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "sic_", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "hqc_", class_methods)
```

For example, to use the Bayesian Information Criteria, call:

```{.matlab}
model = VAR(data, 20);
[modelBest, icTable] = model.fitAndSelect(@VAR.bic_);
```

To compute information criteria for an already estimated model over its own sample, use methods without the trailing underscore. Note these values may differ from those returned by `fitAndSelect`, which evaluates ICs over a common sample across all models:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "aic", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "bic", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "sic", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "hqc", class_methods)
```

```{.matlab}
# Get the HQC value for an estimated model
model.hqc()
```

### Structural Vector Autoregressions (SVARs)

An SVAR can be defined using the `SVAR` class and its constructor as documented below:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", classes)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "SVAR", class_methods)
```

The constructor requires a dataset in `matrix` or `table` form, with each column representing a variable and each row an observation, ordered from earliest to latest. For example, to specify a lag order of four (p = 4):

```{.matlab}
p = 4  % lag length
model = SVAR(data, p)
```

You may include deterministic trends as for the VAR case, using the `trendExponents` option:

```{.matlab}
p = 4  % lag length
model = SVAR(data, p, 'trendExponents', 0:1)
```

To estimate the structural model, an identification method must be provided. Only recursive identification (`Recursive`) is supported for full structural identification. Note that `InternalInstrument` methods can be used to identify impulse responses to a single shock; these are documented in a later section. Fit the model as follows:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "fit", class_methods)
```

```{.matlab}
model.fit(Recursive())
```

After fitting, extract coefficients, fitted values, and residuals:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "coeffs", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "fitted", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "residuals", class_methods)
```


```{.matlab}
% Structural coefficient matrices A0 and APlus
[A0, APlus] = model.coeffs()
% Excluding constants and time trends
[A0, APlus] = model.coeffs(true)
% Fitted values
model.fitted()
% Residuals
model.residuals()
```

You can select the lag length automatically via `fitAndSelect`, which first determines the best reduced‑form `VAR` up to the maximum lag and then applies the chosen identification method:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "fitAndSelect", class_methods)
```

Using AIC (default) with a maximum of twenty lags:

```{.matlab}
model = SVAR(data, 20);
[modelBest, icTable] = model.fitAndSelect(Recursive())
```

Or using HQC for model selection:

```{.matlab}
model = SVAR(data, 20);
[modelBest, icTable] = model.fitAndSelect(Recursive(), @VAR.hqc_)
```

All `VAR` information‑criterion functions (with underscore) may be supplied to choose the optimal `SVAR`.

### Local Projections

A local projection model can be specified using the `LP` class and its constructor:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", classes)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "LP", class_methods)
```

The constructor requires:

- A dataset in `matrix` or `table` form
- A `treatment` variable (either the shock itself or the instrumented variable)
- The number of lags (`p`)
- A vector of horizons (`horizons`)

For example, to estimate horizons $0$–$20$ with 4 lags for treatment variable `Y1`:

```{.matlab}
model = LP(data, 'Y1', 4, 0:20)
```

By default, each regression includes a constant term. To omit the constant, set the `includeConstant` flag to `false`:

```{.matlab}
model = LP(data, 'Y1', 4, 0:20, 'includeConstant', false)
```

Use the `fit` method to estimate the projections:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "fit", class_methods)
```

```{.matlab}
% Uses Recursive by default
model.fit()
```

By default, `fit` applies a recursive (conditional ignorability) assumption. These estimates are structural only if the true shock satisfies this assumption; otherwise, they should be treated as reduced‐form.

Available identification schemes:

- `Recursive` (default)
- `ExternalInstrument` (for external‐instrument IV)

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("ExternalInstrument", classes)
```

To use an external instrument, first instantiate `ExternalInstrument` with the treatment name and an instrument dataset, then supply it to `fit`:

```{.matlab}
method = ExternalInstrument('Y1', data_instruments);
% Estimate the local projection using external instruments
model.fit(method);
```

After estimation, extract the results for each method (note the differing dimensions) via:

- `coeffs`: (response variable × regressors × horizons)
- `fitted`, `residuals`: (observations × variables × horizons)

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "coeffs", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "fitted", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "residuals", class_methods)
```

```{.matlab}
# Coefficients
model.coeffs()
# Excluding the constant 
model.coeffs(true)
# Fitted values
model.fitted()
# Residuals
model.residuals()
```

To select the lag order automatically, use `fitAndSelect`, which fits `VAR`s internally to choose the optimal `p`:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "fitAndSelect", class_methods)
```

All `VAR` underscore‑suffixed information‑criterion functions (e.g., `aic_`, `bic_`, `sic_`, `hqc_`) may be used for `LP` lag selection. For example, using BIC:

```{.matlab}
model = LP(data, 'Y1', 20, 0:20);
[modelBest, icTable] = model.fitAndSelect(Recursive(), @VAR.bic_);
```

### DSGE

A DSGE model can be specified using the `DSGE` class. Before defining the model, you must compute its first‐order approximation in *Dynare*. Refer to [Dynare’s manual](https://www.dynare.org/manual/) for details.

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("DSGE", classes)
```

Once Dynare has run, the workspace should contain the structures `M_`, `oo_`, and `options_`. Use these to define your `DSGE` model:

```{.matlab}
model = DSGE(M_, options_, oo_)
```

The TCA toolbox represents the DSGE as a VARMA model, whereas Dynare uses a state‐space form. For the VARMA representation to exist, the number of observed variables (`varobs`) must equal the number of structural shocks, and these observed variables must span the shock space. If this condition is not met, calling any method on the DSGE model will return an error.

To inspect the observed variables and structural shocks, use:

```{.matlab}
% Observed variables in the varobs block
varNames = model.getVariableNames();
% Structural shock names
shockNames = model.getShockNames();
```

## 2. Obtaining the effects -- structural IRFs

Once a model is defined, you can compute total dynamic causal effects—impulse response functions (IRFs)—using the `IRF` method. The IRF function always requires a maximum horizon (`maxHorizon`) for computation. For reduced‐form models, you may also supply an `IdentificationMethod` to derive structural IRFs.

Details on IRF computation for all models are provided below.

### VARs

Obtain reduced‐form IRFs from a VAR model by specifying the maximal horizon:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "IRF", class_methods)
```

```{.matlab}
maxHorizon = 20;
irfObj = model.IRF(maxHorizon);
```

Here, `irfObj` is an `IRFContainer` holding both the IRF array and related metadata:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("IRFContainer", classes)
```

Printing `irfObj` displays a 3D array with dimensions:

1. Response variable
2. Shock
3. Horizon (starting at 0 for contemporaneous effect)

To retrieve the raw IRF array, call:

```{.matlab}
irfObj.getIrfArray()
```

To compute structural IRFs, supply an `IdentificationMethod`. Supported methods include recursive and internal‐instrument schemes:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("IdentificationMethod", classes)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("Recursive", classes)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("InternalInstrument", classes)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("InternalInstrument", "InternalInstrument", class_methods)
```


For a recursive identification:

```{.matlab}
irfObj = model.IRF(maxHorizon, 'IdentificationMethod', Recursive())
```

To use an internal instrument, specify a `normalisingVariable`, then optionally override the `instrument` (default: first variable) or the `normalisingHorizon` (default: 0 for contemporaneous effect):

```{.matlab}
normalisingVariable = 'Y2'
method = InternalInstrument(normalisingVariable)
irfObj = model.IRF(maxHorizon, 'IdentificationMethod', method)
```

```{.matlab}
% Changing the instrument to be Y2 and the normalisingVariable to be Y3
method = InternalInstrument('Y3', 'instrument', 'Y2')
```

```{.matlab}
% Changing the normalisingHorizon to be period 1
method = InternalInstrument('Y3', 'instrument', 'Y2', 'normalisingHorizon', 1)
```

### SVARs

Impulse response functions can be obtained from an `SVAR` using the `IRF` function, analogous to the `VAR` case. Since an SVAR is already structurally identified, `IRF` returns structural IRFs directly:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "IRF", class_methods)
```

::: {.callout-note}
# Using SVARs and Internal Instruments

The `SVAR.IRF` method requires a fully identified `SVAR`. Internal instruments (via `InternalInstrument`) cannot be applied to an `SVAR` directly. To use internal instruments for IRF identification, first define a reduced‐form `VAR`, apply the instrument there, and then compute IRFs:


```{.matlab}
model = VAR(data, p);
normalisingVariable = 'Y2';
method = InternalInstrument(normalisingVariable);
irfObj = model.IRF(maxHorizon, 'identificationMethod', method);
```

:::

### Local Projections

Impulse response functions can be obtained from an estimated `LP` model using `IRF`. These IRFs are structural whenever the LP model was estimated structurally.

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "IRF", class_methods)
```

```{.matlab}
irfObj = model.IRF(maxHorizon)
```

Optionally, supply an identification method (`Recursive` or `ExternalInstrument`) to re-estimate the local projection and compute IRFs under that scheme:

```{.matlab}
% USing recursive identification
irfObj = model.IRF(maxHorizon, 'identificationMethod', Recursive())
% Using external instruments
method = ExternalInstrument('Y1', data_instruments);
irfObj = model.IRF(maxHorizon, 'identificationMethod', method);
```

### DSGE

If a VARMA representation of the `DSGE` model exists, compute IRFs for the `varobs` variables via `IRF`:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("DSGE", "IRF", class_methods)
```

```{.matlab}
maxHorizon = 20;
irfObj = model.IRF(maxHorizon);
```

## 3. Defining a transmission matrix. 

The next step in a transmission channel analysis is to define the transmission matrix, which specifies the ceteris paribus ordering of variables in the chosen equilibrium representation. The simplest way is to list the variables in the desired order as a cell array of `char`. For example, if your data contains `Y1`, `Y2`, `Y3`, and `Y4`, and you wish to order them as `Y4`, `Y2`, `Y1`, `Y3`, define:

```{.matlab}
transmissionOrdering = {'Y4', 'Y2', 'Y1', 'Y3'};
```

::: {.callout-note appearance="minimal"}
**Note**: The ordering must be a cell array of character vectors (not string arrays).
:::

Advanced methods for constructing transmission matrices are covered in the [Advanced Methods Section](./advanced.qmd).

## 4. Definining transmission channels.

With the transmission matrix in place, you can specify transmission channels of interest via the helper functions `through` and `notThrough`. These functions return a transmission condition `Q` that you can combine to define complex transmission channels. More advanced methods for defining transmission channels are documented in the [Advanced Methods Section](./advanced.qmd).

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("Q", classes)
```

**through**

Use `through` to define channels that pass through specified variables at given horizons:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("Model", "through", class_methods)
```

Examples (for any model — VAR, SVAR, LP, or DSGE — with transmissionOrder or a transmission matrix as described above):

1. Channel through `Y1` at horizons 0-3:

```{.matlab}
q = model.through('Y1', 0:3, transmissionOrder);
```

2. Channel through `Y1` and `Y2` contemporaneously:

```{.matlab}
q = model.through({'Y1', 'Y2'}, 0, transmissionOrder);
```

3. Channel through `Y1` at horizon 0 and `Y2` at horizons 0–1:

```{.matlab}
q = model.through({'Y1', 'Y2'}, {0:0, 0:1}, transmissionOrder);
```

**notThrough**

Use `notThrough` to define channels that **do not** go through specified variables at given horizons:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("Model", "notThrough", class_methods)
```

Examples (for any model — VAR, SVAR, LP, or DSGE — with transmissionOrder or a transmission matrix as described above):

1. Channel not through `Y1` at horizons 0-20:

```{.matlab}
q = model.notThrough('Y1', 0:20, transmissionOrder);
```

2. Channel not through `Y1` and not through `Y2` at horizons 0-20:

```{.matlab}
q = model.notThrough({'Y1', 'Y2'}, 0:20, transmissionOrder);
```

3. Channel not through `Y1` contemporaneously and not through `Y2` at horizon 1:

```{.matlab}
q = model.notThrough({'Y1', 'Y2'}, {0:0, 1:1}, transmissionOrder);
```

**Combining through and notThrough**

Both `through` and `notThrough` return a transmission condition `Q`, which can be combined using logical operators: 

- AND (`&`): both conditions must be satisfied.
- OR (`|`): at least one condition must be satisfied.
- NOT (`~`): negates a condition.

Examples: 

1. Channel through `Y1` contemporaneously but not through `Y2` contemporaneously:

```{.matlab}
q1 = model.through('Y1', 0, transmissionOrder);
q2 = model.notThrough('Y2', 0, transmissionOrder);
q = q1 & q2;
```

2. Channel through `Y1` contemporaneously or not through `Y2` contemporaneously:

```{.matlab}
q1 = model.through('Y1', 0, transmissionOrder);
q2 = model.notThrough('Y2', 0, transmissionOrder);
q = q1 | q2;
```

3. Channel not through `Y1` contemporaneously (both ways are equivalent):

```{.matlab}
q1 = model.through('Y1', 0, transmissionOrder);
q = ~q1;  # not through Y1 contemporaneously
q = model.notThrough('Y1', 0, transmissionOrder);
```

4. Channel through `Y1` in at least one period between horizons 0-20: 

```{.matlab}
q = model.notThrough('Y1', 0:20, transmissionOrder);
q = ~q;
```

By combining through and notThrough with logical operators, you can flexibly construct any complex transmission channel you require. 

## 5. Obtaining transimssion effects. 

Once you have defined a `model` (VAR, SVAR, LP, or DSGE), the `transmission` method computes transmission effects along your specified channel. Below are the details for each model type.

### VAR, SVAR, or LP

For `VAR`, or for `SVAR` and `LP` models that have not yet been structurally estimated, you must provide an `IdentificationMethod` (since at least one structural shock is required):

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("VAR", "transmission", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("SVAR", "transmission", class_methods)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("LP", "transmission", class_methods)
```

For example, to compute the effects of the first structural shock up to `maxHorizon`, using a transmission matrix `transmissionOrder` and a transmission condition `q`:

```{.matlab}
% model can be VAR, SVAR, or LP
effects = model.transmission(
    1, ...                % shock index
    q, ...                % transmission condition
    transmissionOrder, ...% transmission matrix
    maxHorizon, ...       % maximum horizon
    'IdentificationMethod', method ... % Recursive, InternalInstrument (VAR/SVAR) or ExternalInstrument (LP)
);
```

The returned `effects` array has dimensions:

1. Response variables (in original data order)
2. Transmission effect of the chosen shock
3. Horizons (starting at 0)

If your `SVAR` or `LP` model is already structurally identified (fitted with a structural identification scheme), you may omit the identification argument:

```{.matlab}
% model is a SVAR or structurally estimated LP
effects = model.transmission(1, q, transmissionOrder, maxHorizon)
```

### DSGE

Since `DSGE` models are inherently structural and shocks can be named, you may specify the shock by name or index. No identification method is needed:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("DSGE", "transmission", class_methods)
```

For example, if `mp` (monetary policy shock) is the first shock:

```{.matlab}
% By name
effects = model.transmission('mp', q, transmissionOrder, maxHorizon);

% By index (equivalent)
effects = model.transmission(1, q, transmissionOrder, maxHorizon);
```

## 6. Visualising effects. 

To inspect transmission effects graphically, use the helper functions:

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("plotDecomposition", functions)
```

```{julia}
#| echo: false
#| output: asis

include_callout_block_matlab("plotCompareDecomposition", functions)
```

- `plotDecomposition` Visualises a single transmission-channel decomposition of the IRFs.
- `plotCompareDecomposition`: Compares two decompositions obtained from different transmission matrices.

See the [Examples](../../examples/matlab/dynare/index.qmd) for usage demos.
