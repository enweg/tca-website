---
title: TransmissionChannelAnalysis.jl
engine: julia
bibliography: "../../references.bib"
---


```{julia}
#| echo: false
#| output: false

using DocUtils
using TransmissionChannelAnalysis
```

The package `TransmissionChannelAnalysis.jl` provides functionns for TCA in Julia. It is to date the most advanced of the packages, allowing for all kinds of transmission channels. However, implementing more advanced trasnmission channels requires the use of more advanced methods within the package. For most users and for most applications, the basic funcionality is sufficient. This basic functionality will be documented first, with some more advanced features discussed later. 

::: {.callout-note}

# Contributer Information

For interested contributers or others interested in the internals of `TransmissionChannelAnalysis.jl` please have a look at the [explanation of the internals](internals.qmd).
:::

## Defining Simple Transmission Channels

Two helper functions are provided that allow for the definition of transmission channels without having to use the more advanced methods. These are `through`{.julia} and `not_throug`{.julia}. As the names hint at, `through`{.julia} is used to define a channel that must go through certain variables in certain periods, while `not_through`{.julia} is used to define a transmission channel that cannot go through certain variables in all defined periods. 


```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(through)
```

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(not_through)
```

Both `through`{.julia} and `not_through`{.julia} return a transmission condition `Q`, which is simply an internal representation of the provided transmission channel (represented as [Boolean statements](/learn/boolean-conditions.qmd)). To double check whether the condition represents the desired channel, simply run `Q`{.julia} in the REPL, which will display the internal representation using the [systems form](/learn/systems-form.qmd) and thus using the variable notation $x$. Alternatively, `show_y`{.julia} or `@show_y`{.julia} can be used to display the internal representation in the [dynamic form](/learn/dynamic-form.qmd) and thus using the variable notation $y$. 

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(show_y)
```

### Advanced Usage of `through`{.julia} and `not_through`{.julia}

Conditions created using `through`{.julia} and `not_through`{.julia} can be combined using AND (`&`{.julia}), OR (`|`{.julia}) and NOT (`!`{.julia}). Every new combination will return a new condition that combines the previous conditions. The returned conditions can again be combined using AND, OR, and NOT. For example, if `q1`{.julia}, `q2`{.julia} and `q3`{.julia} are conditions obtained using `through`{.julia} or `not_through`{.julia}, then the following works.


```{julia}
#| eval: false

q1_and_q2 = q1 & q2
q1_and_not_q3 = q1 & !q3
q4 = (q1 | q2) & !q3
q5 = q4 | q1
```

This functionality allows definitions of transmission channels that are not easily defined using `through`{.julia} and `not_through`{.julia}. For example, if we were interested in the transmission channel that goes through $y_{1,0}$ OR through $y_{1,1}$, then neither of the helper functions can be used, since neither can handle OR statements. However, we can use [Boolean logic](/learn/boolean-conditions.qmd) and the [rules for the manipulation of transmission conditions](/learn/algebra.qmd) to define this transmission channel using our helper functions. 

In most cases, the easiest step is to negate the original condition. The above condition can be succintly be represented as 
$$
y_{1,0} \lor y_{1,1}.
$$
The negated statement is thus 
$$
\neg y_{1,0} \land \neg y_{1,1}.
$$
This can be defined using `not_through`{.julia} in the following way 

```{julia}
#| eval: false

q = not_through(1, [0,1], 1:n)
```

where we assumed that the transmission matrix is the identity matrix, implying an ordering `1:n`{.julia}.  

To obtain the original transmission channel, we can simply negate this condition.

```{julia}
#| eval: false

original_condition = !q
```

## Defining Complex Transmission Channels

Although `through`{.julia} and `not_through`{.julia} are sufficient for many situations, it is still sometimes more convenient to directly define the transmission channel as a [Boolean condition](/learn/boolean-conditions.qmd) withough having to refer back to `though`{.julia} and `not_through`{.julia}. 

Say, for example, we are again interested in the transmission channel going through `y_{1,0}` OR `y_{1,1}`. Instead of using the approach of first negating the statement, then using `not_through`{.julia}, just to negate this statement again, we may as well just define the condition directly using the more advanced functionality of `TransmissionChannelAnalysis.jl`. 

The advanced functionality simply takes a `String` that defines the transmission channel as a Boolean condition. The string can either be defined using the variables of the [dynamic form](/learn/dynamic-form.qmd) $y$ or the variables using the [systems form](/learn/systems-form.qmd) $x$. In the former case, the ordering defined by the transmission matrix must also be defined. In either case, `make_condition`{.julia} is used. 

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(make_condition)
```

So, to define the transmission channel that goes through `y_{1,0}` OR through $y_{1,1}$ with an identity transmission matrix, we can do either of the following. 


```{julia}
#| eval: false

# Note, we assume 4 variables in the system. 
q = make_condition("y_{1,0} | y_{1,1}", 1:4)
# With an identity transmission matrix, y_{1,0} -> x1
# and y_{1,1} -> x5 if the transmission matrix
# is the identity matrix.
q = make_condition("x1 | x5")
```

## Computing Transmission Effects

Transmission effects, i.e. the effect through the transmission channel, can be computed in one of two ways in `TransmissionChannelAnalysis.jl`. The first way is to use the [systems form](/learn/systems-form.qmd) to compute the transmission effect. The second way exploits the sufficiency of impulse response functions (IRFs)[^1] and uses these to compute the effects. The following sections describe both methods. 

[^1]: See Section 4 in @wegnerTCA2024.

### Preparing the Systems Form

The [systems form](/learn/systems-form.qmd) can be used whenever a SVAR(MA) was estimated and the AR and MA coefficients are available. The first step then consists of transforming the [dynamic form](/learn/dynamic-form.qmd) of the SVAR(MA) into the systems form. We provide the utility function `make_systems_form`{.julia} for this purpose. 

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(make_systems_form)
```

The returned systems form can then be used in `transmission`{.julia} to compute the trasnmission effect. 

Besides `make_systems_form`{.julia} we also offer the two separate functions `make_B`{.julia} and `make_Omega`{.julia} which respectively create $B$ and $\Omega$ of the [systems form](/learn/systems-form.qmd). Use of these two functions should most of the time not be required. However, for users that might want to research of TCA, having access to these two methods seperately can be helpful. 

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(make_B)
```

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(make_Omega)
```

### Preparing the IRFs

Estimating the transmission effects using IRFs requires Cholesky / orthogonalised IRFs for all variables, as well as the structural shocks impulse response functions. In either case, `TransmissionChannelAnalysis.jl`{.julia} works internally with a matrix representation of IRFs. Since many software solutions for SVAR(MA) return IRFs in the form of three-dimensional arrays, we provide the utility function `to_transmission_irfs`{.julia} that transforms the three-dimensional arrays into a matrix of IRFs. 

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(to_transmission_irfs)
```

`to_transmission_irfs`{.julia} should be applied to both the Cholesky / orthogonalised and the structural IRFs. The resulting IRFs can then be used in `transmission`{.julia} to compute the transmission effects. 

### Computing

With either the IRFs or the systems form prepared, transmission effects can be computed using any of the following versions of the `transmission`{.julia} function. In either case, the fourth argument to `transmission`{.julia} must be a transmission condition that can be obtained in any of the ways described above. 

To compute transmission effects using the systems form, `method`{.julia} should be set equal to `:BOmega`{.julia}. Similarly, to use IRFs, `method`{.julia} should be set equal to `:irfs`{.julia}. The default is set to `:BOmega`{.julia} and thus, if not further specified, `TransmissionChannelAnalysis.jl`{.julia} assumes that the systems form is being used. This choice was mostly made because the computations under the systems form are faster than the computations using IRFs. 

```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(transmission)
```

It may occur that a transmission condition contains a contradiction, i.e. a part of the boolean conditions says $x_i \land \neg x_i$. These are usually automatically removed internally. However, this automatic removal can sometimes lengthen the time it takes for the condition to compile. We therefore offer the utility function `set_remove_contradictions`{.julia} that can be used to turn this off. Even if off, the resulting transmission effect will be correct, but the computation may take a bit longer. Thus, there is a trade-off between longer compile times (if contradictions are being removed) and longer computing time (if contradictions are not removed). 


```{julia}
#| echo: false
#| output: asis

include_quarto_callout_doc(set_remove_contradictions)
```

## Additional Utility Functions

[list of functions](all-functions.qmd)
